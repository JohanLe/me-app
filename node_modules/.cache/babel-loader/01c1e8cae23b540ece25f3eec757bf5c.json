{"ast":null,"code":"var _jsxFileName = \"/Users/Ledel/Documents/skola/bth/dbwebb-kurser/ramverk1/me/app/me-app/me-app/src/js/components/ReportEdit.js\";\nimport React from 'react';\nimport ReportQuestion from './ReportQuestion.js';\n\nclass ReportEdit extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getReport = () => {\n      fetch(\"http://localhost:8333/reports/\" + this.state.kmom, {\n        method: \"GET\",\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }).then(res => {\n        return res.json();\n      }).then(async res => {\n        var parsed = JSON.parse(res.data.text).data;\n        var data = parsed.map((item, index) => {\n          item['id'] = index;\n          return item;\n        });\n        this.setState({\n          reportData: data\n        });\n        this.state.editFields = this.createReportQuestion(this.state.reportData);\n      });\n    };\n\n    this.postReport = data => {\n      console.log(this.state.reportData); // todo skicka json filer\n\n      fetch(\"http://localhost:8333/reports\", {\n        method: \"POST\",\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          kmom: this.state.kmom,\n          data: data\n        })\n      }).then(res => {\n        return res.json();\n      }).then(res => {\n        console.log(res);\n      });\n    };\n\n    this.createReportQuestion = data => {\n      var questions = data.map((collection, index) => {\n        index += this.state.editFields.length;\n        return React.createElement(ReportQuestion, {\n          key: index,\n          index: index,\n          question: collection.question,\n          answer: collection.answer,\n          triggerQuestion: this.handleOnChange,\n          triggerAnswer: this.handleOnChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        });\n      });\n      var newData = this.state.editFields;\n      newData.push(questions);\n      this.setState({\n        editFields: newData\n      });\n    };\n\n    this.addQuestion = event => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.createReportQuestion([{\n        question: \"New\",\n        answer: \"New\"\n      }]);\n      console.log(this.state.editFields);\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      console.log(this.state.reportData); //this.postReport(this.state.reportData);\n    };\n\n    this.handleOnChange = event => {\n      let nam = event.target.name;\n      let val = event.target.value;\n      var state = this.state.reportData;\n      this.setState({\n        reportData: state\n      });\n    };\n\n    this.state = {\n      kmom: this.props.match.params.kmom,\n      reportData: [],\n      editFields: []\n    };\n    this.getReport();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"edit_report_container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"edit-question-form\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, this.state.editFields), React.createElement(\"button\", {\n      onClick: this.addQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Add question\"), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Spara\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default ReportEdit;","map":{"version":3,"sources":["/Users/Ledel/Documents/skola/bth/dbwebb-kurser/ramverk1/me/app/me-app/me-app/src/js/components/ReportEdit.js"],"names":["React","ReportQuestion","ReportEdit","Component","constructor","props","getReport","fetch","state","kmom","method","headers","then","res","json","parsed","JSON","parse","data","text","map","item","index","setState","reportData","editFields","createReportQuestion","postReport","console","log","body","stringify","questions","collection","length","question","answer","handleOnChange","newData","push","addQuestion","event","preventDefault","handleSubmit","nam","target","name","val","value","match","params","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReportQuestion from './ReportQuestion.js';\n\nclass ReportEdit extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            kmom: this.props.match.params.kmom,\n            reportData: [],\n            editFields: [],\n        };\n        this.getReport();\n    }\n\n    getReport = () => {\n        fetch(\"http://localhost:8333/reports/\" + this.state.kmom, {\n            method: \"GET\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n        }).then((res) => {\n            return res.json();\n        }).then(async (res) => {\n            var parsed = JSON.parse(res.data.text).data;\n            var data = parsed.map((item, index) => {\n                item['id'] = index;\n                return item;\n            });\n            this.setState({reportData: data});\n            this.state.editFields = this.createReportQuestion(this.state.reportData);\n\n        });\n    };\n    postReport = (data) => {\n        console.log(this.state.reportData);\n        // todo skicka json filer\n        fetch(\"http://localhost:8333/reports\", {\n            method: \"POST\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                kmom: this.state.kmom,\n                data: data\n            })\n        }).then((res) => {\n            return res.json()\n        }).then((res) => {\n            console.log(res);\n        })\n\n    };\n\n    createReportQuestion = (data) => {\n        var questions = data.map((collection, index) => {\n            index += this.state.editFields.length;\n            return (\n                <ReportQuestion\n                    key={index}\n                    index={index}\n                    question={collection.question}\n                    answer={collection.answer}\n                    triggerQuestion={this.handleOnChange}\n                    triggerAnswer={this.handleOnChange}\n                />\n            );\n        });\n        var newData = this.state.editFields;\n        newData.push(questions);\n        this.setState({editFields: newData});\n    };\n    addQuestion = (event) => {\n        if (event) {\n            event.preventDefault();\n        }\n        this.createReportQuestion([{question: \"New\", answer: \"New\"}])\n\n        console.log(this.state.editFields);\n    };\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        console.log(this.state.reportData)\n        //this.postReport(this.state.reportData);\n    };\n\n    handleOnChange = (event) => {\n\n        let nam = event.target.name;\n        let val = event.target.value;\n        var state = this.state.reportData;\n        this.setState({reportData: state});\n    };\n\n\n    render() {\n        return (\n            <div className=\"edit_report_container\">\n\n                <form className=\"edit-question-form\" onSubmit={this.handleSubmit}>\n                    <div>\n                        {this.state.editFields}\n                    </div>\n                    <button onClick={this.addQuestion}>Add question</button>\n                    <input type=\"submit\" value=\"Spara\"/>\n                </form>\n\n            </div>\n\n        )\n    }\n}\n\nexport default ReportEdit;"]},"metadata":{},"sourceType":"module"}