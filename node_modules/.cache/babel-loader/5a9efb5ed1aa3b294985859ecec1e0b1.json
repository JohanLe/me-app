{"ast":null,"code":"var _jsxFileName = \"/Users/Ledel/Documents/skola/bth/dbwebb-kurser/ramverk1/me/app/me-app/me-app/src/js/components/ReportEdit.js\";\nimport React from 'react';\nimport ReportQuestion from './ReportQuestion.js';\n\nclass ReportEdit extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getReport = () => {\n      fetch(\"http://localhost:8333/reports/\" + this.state.kmom, {\n        method: \"GET\",\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }).then(res => {\n        return res.json();\n      }).then(async res => {\n        this.setState({\n          reportData: JSON.parse(res.data.text).data\n        });\n        this.state.editFields = this.createReportQuestion(this.state.reportData);\n        console.log(\"REPORTDATA\");\n        console.log(this.state.reportData);\n      });\n    };\n\n    this.postReport = data => {\n      console.log(this.state.reportData); // todo skicka json filer\n\n      fetch(\"http://localhost:8333/reports\", {\n        method: \"POST\",\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          kmom: this.state.kmom,\n          data: data\n        })\n      }).then(res => {\n        return res.json();\n      }).then(res => {\n        console.log(res);\n      });\n    };\n\n    this.createReportQuestion = data => {\n      var questions = data.map((collection, index) => {\n        index += this.state.editFields.length;\n        return React.createElement(ReportQuestion, {\n          key: index,\n          index: index,\n          question: collection.question,\n          answer: collection.answer,\n          triggerQuestion: this.handleOnChange,\n          triggerAnswer: this.handleOnChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        });\n      });\n      var newData = this.state.editFields;\n      newData.push(questions);\n      this.setState({\n        editFields: newData\n      });\n    };\n\n    this.addQuestion = event => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.createReportQuestion([{\n        question: \"New\",\n        answer: \"New\"\n      }]);\n      console.log(this.state.editFields);\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      console.log(event.target[0]);\n      console.log(event.target[1]); //this.postReport(this.state.reportData);\n    };\n\n    this.handleOnChange = event => {\n      let nam = event.target.name;\n      let val = event.target.value;\n      var state = this.state.reportData;\n\n      for (var i = 0; i < state.length(); i++) {\n        if (state.data.includes(nam)) {\n          console.log(\"Includes\");\n        }\n      }\n\n      this.setState({\n        reportData: state\n      });\n    };\n\n    this.state = {\n      kmom: this.props.match.params.kmom,\n      reportData: [],\n      editFields: []\n    };\n    this.getReport();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"edit_report_container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"edit-question-form\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, this.state.editFields), React.createElement(\"button\", {\n      onClick: this.addQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Add question\"), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Spara\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default ReportEdit;","map":{"version":3,"sources":["/Users/Ledel/Documents/skola/bth/dbwebb-kurser/ramverk1/me/app/me-app/me-app/src/js/components/ReportEdit.js"],"names":["React","ReportQuestion","ReportEdit","Component","constructor","props","getReport","fetch","state","kmom","method","headers","then","res","json","setState","reportData","JSON","parse","data","text","editFields","createReportQuestion","console","log","postReport","body","stringify","questions","map","collection","index","length","question","answer","handleOnChange","newData","push","addQuestion","event","preventDefault","handleSubmit","target","nam","name","val","value","i","includes","match","params","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReportQuestion from './ReportQuestion.js';\n\nclass ReportEdit extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            kmom: this.props.match.params.kmom,\n            reportData: [],\n            editFields: [],\n        };\n        this.getReport();\n    }\n\n    getReport = () => {\n        fetch(\"http://localhost:8333/reports/\" + this.state.kmom, {\n            method: \"GET\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n        }).then((res) => {\n            return res.json();\n        }).then(async (res) => {\n            this.setState({reportData: JSON.parse(res.data.text).data});\n            this.state.editFields = this.createReportQuestion(this.state.reportData);\n            console.log(\"REPORTDATA\")\n            console.log(this.state.reportData);\n        });\n    };\n    postReport = (data) => {\n        console.log(this.state.reportData);\n        // todo skicka json filer\n        fetch(\"http://localhost:8333/reports\", {\n            method: \"POST\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                kmom: this.state.kmom,\n                data: data\n            })\n        }).then((res) => {\n            return res.json()\n        }).then((res) => {\n            console.log(res);\n        })\n\n    };\n\n    createReportQuestion = (data) => {\n        var questions = data.map((collection, index) => {\n            index += this.state.editFields.length;\n            return (\n                <ReportQuestion\n                    key={index}\n                    index={index}\n                    question={collection.question}\n                    answer={collection.answer}\n                    triggerQuestion={this.handleOnChange}\n                    triggerAnswer={this.handleOnChange}\n                />\n            );\n        });\n        var newData = this.state.editFields;\n        newData.push(questions);\n        this.setState({editFields: newData});\n    };\n    addQuestion = (event) => {\n        if (event) {\n            event.preventDefault();\n        }\n\n        this.createReportQuestion([{question: \"New\", answer: \"New\"}])\n        console.log(this.state.editFields);\n    };\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        console.log(event.target[0]);\n        console.log(event.target[1]);\n        //this.postReport(this.state.reportData);\n    };\n\n    handleOnChange = (event) => {\n\n        let nam = event.target.name;\n        let val = event.target.value;\n        var state = this.state.reportData;\n        for (var i = 0; i < state.length(); i++) {\n            if (state.data.includes(nam)) {\n                console.log(\"Includes\");\n            }\n        }\n\n\n        this.setState({reportData:  state});\n    };\n\n\n    render() {\n        return (\n            <div className=\"edit_report_container\">\n\n                <form className=\"edit-question-form\" onSubmit={this.handleSubmit}>\n                    <div>\n                        {this.state.editFields}\n                    </div>\n                    <button onClick={this.addQuestion}>Add question</button>\n                    <input type=\"submit\" value=\"Spara\"/>\n                </form>\n\n            </div>\n\n        )\n    }\n}\n\nexport default ReportEdit;"]},"metadata":{},"sourceType":"module"}