{"ast":null,"code":"var _jsxFileName = \"/Users/ledel/WebbServer/dbwebb-kurser/jsramverk/me/app/me-app/src/js/components/Chat.js\";\nimport React from 'react';\nimport io from 'socket.io-client';\nconst socket = io('http://localhost:3000');\n\nclass Chat extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"\",\n      username: \"\",\n      messages: []\n    };\n    this.handleJoinChat = this.handleJoinChat.bind(this);\n    this.handleChangeUsername = this.handleChangeUsername.bind(this);\n    this.handleChangeText = this.handleChangeText.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleMessageRecived = this.handleMessageRecived.bind(this);\n    this.handleOldMessagesRecived = this.handleOldMessagesRecived.bind(this);\n  }\n\n  componentDidMount() {\n    socket.on('connect', function () {\n      console.info(\"Connected\");\n    });\n    socket.on('chat message', this.handleMessageRecived);\n    socket.on('join', this.handleUserJoined);\n    socket.on(\"all messages\", function (data) {\n      console.log(\"SOCKET ID \");\n      console.log(data);\n    });\n    socket.on('disconnect', function () {\n      this.setState({\n        username: \"\"\n      });\n    });\n  }\n\n  handleOldMessagesRecived(messages) {\n    this.setState({\n      messages: messages\n    });\n  }\n\n  handleMessageRecived(message) {\n    var messages = this.state.messages;\n    messages.push(message);\n    this.setState({\n      messages: messages\n    });\n  }\n\n  handleJoinChat(event) {\n    event.preventDefault();\n    var date = new Date();\n    socket.emit('join', {\n      username: \"\",\n      text: this.state.username + \" joined the chat\",\n      time: date.getHours() + \" : \" + date.getMinutes() + \" : \" + date.getSeconds(),\n      id: socket.id\n    });\n  }\n\n  getAllMessages() {}\n\n  handleChangeUsername(event) {\n    this.setState({\n      username: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    var date = new Date();\n\n    if (this.state.username === \"\") {\n      return;\n    }\n\n    socket.emit('chat message', {\n      username: this.state.username,\n      text: this.state.text,\n      time: date.getHours() + \" : \" + date.getMinutes() + \" : \" + date.getSeconds()\n    });\n  }\n\n  handleChangeText(event) {\n    this.setState({\n      text: event.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"chat-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Chat\"), React.createElement(\"form\", {\n      onSubmit: this.handleJoinChat,\n      className: \"message-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Username\"), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"message-form-username\",\n      onChange: this.handleChangeUsername,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Join chat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"all-messages\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, this.state.messages.map((msg, index) => React.createElement(\"div\", {\n      key: index,\n      className: \"message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"all-messages-username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \" \", msg.username, \" | \", msg.time, \" \"), React.createElement(\"p\", {\n      className: \"all-messages-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"  \", msg.text)))), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      className: \"message-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Message\"), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"message-form-text\",\n      onChange: this.handleChangeText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Skicka\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/ledel/WebbServer/dbwebb-kurser/jsramverk/me/app/me-app/src/js/components/Chat.js"],"names":["React","io","socket","Chat","Component","constructor","props","state","text","username","messages","handleJoinChat","bind","handleChangeUsername","handleChangeText","handleSubmit","handleMessageRecived","handleOldMessagesRecived","componentDidMount","on","console","info","handleUserJoined","data","log","setState","message","push","event","preventDefault","date","Date","emit","time","getHours","getMinutes","getSeconds","id","getAllMessages","target","value","render","map","msg","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport io from 'socket.io-client';\n\nconst socket = io('http://localhost:3000');\n\nclass Chat extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            text: \"\",\n            username: \"\",\n            messages: []    \n        };\n\n        this.handleJoinChat = this.handleJoinChat.bind(this);\n        this.handleChangeUsername = this.handleChangeUsername.bind(this);\n        this.handleChangeText = this.handleChangeText.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleMessageRecived = this.handleMessageRecived.bind(this);\n        this.handleOldMessagesRecived = this.handleOldMessagesRecived.bind(this);\n    }\n    componentDidMount(){\n        socket.on('connect', function() {\n            console.info(\"Connected\");\n        });\n\n        socket.on('chat message', this.handleMessageRecived);\n\n        socket.on('join', this.handleUserJoined);\n\n        socket.on(\"all messages\", function(data){\n            console.log(\"SOCKET ID \");\n            console.log(data);\n        })\n\n        socket.on('disconnect', function() {\n            this.setState({username: \"\"});\n        });\n    }\n\n    handleOldMessagesRecived(messages){\n        this.setState({messages:messages});\n    }\n    handleMessageRecived(message) {\n        var messages = this.state.messages;\n        messages.push(message);\n        this.setState({messages:messages});\n    }\n\n    handleJoinChat(event) {\n        event.preventDefault();\n        var date = new Date();\n\n        socket.emit('join',\n        {\n        username: \"\",\n        text: this.state.username + \" joined the chat\",\n        time: date.getHours() + \" : \" + date.getMinutes() + \" : \" + date.getSeconds(),\n        id: socket.id\n     });\n\n    }\n\n    getAllMessages(){\n\n    }\n\n    handleChangeUsername(event) {\n        this.setState({username: event.target.value});\n     }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        var date = new Date();\n\n        if(this.state.username === \"\"){\n            return;\n        }\n        socket.emit('chat message', \n        {\n            username: this.state.username,\n            text: this.state.text,\n            time: date.getHours() + \" : \" + date.getMinutes() + \" : \" + date.getSeconds()\n        });\n    }\n\n    handleChangeText(event) {\n        this.setState({text: event.target.value});\n    }\n\n\n\n    render() {\n        return  <div className=\"chat-container\">\n\n                    \n\n\n                    <h4>Chat</h4>\n                    <form onSubmit={this.handleJoinChat} className=\"message-form\">\n                        <label>Username</label>\n                        <input type=\"text\" className=\"message-form-username\" onChange={this.handleChangeUsername}/>\n                        <input type=\"submit\" value=\"Join chat\" />\n                    </form>\n                    <div className=\"all-messages\">\n                    {this.state.messages.map((msg, index) => (\n                       \n                        <div key={index} className=\"message\">\n                            <p className=\"all-messages-username\"> {msg.username} | {msg.time} </p>\n                            <p className=\"all-messages-text\">  {msg.text}</p>\n                        </div>\n\n                    ))}\n\n                    </div>\n\n                    <form onSubmit={this.handleSubmit} className=\"message-form\">\n                        <label>Message</label>\n                        <input type=\"text\" className=\"message-form-text\" onChange={this.handleChangeText}/>\n                        <input type=\"submit\" value=\"Skicka\" />\n                    </form>\n                    \n                </div>\n    }\n}\n\n\n\n\n\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}